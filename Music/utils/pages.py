from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InputMediaPhoto, Message

from config import Config
from Music.core.clients import PbxBot
from Music.core.database import db
from Music.helpers.buttons import Buttons
from Music.helpers.formatters import formatter


class Pages:
    
    def __init__(self):
        pass
    
    async def song_page(self, message: Message, rand_key: str, key: int):
        
        m = message.message if isinstance(message, CallbackQuery) else message
        
        if Config.SONG_CACHE[rand_key]:
            all_tracks = Config.SONG_CACHE[rand_key]
            btns = Buttons.song_markup(rand_key, all_tracks[key]["link"], key)
            cap = f"__({key+1}/{len(all_tracks)})__ **s·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä:**\n\n"
            cap += f"**‚Ä¢ ·¥õ…™·¥õ ü·¥á:** `{all_tracks[key]['title']}`\n\n"
            cap += f"üé∂ {PbxBot.app.mention}"
            
            await m.edit_media(
                InputMediaPhoto(
                    all_tracks[key]["thumbnail"],
                    caption=cap,
                ),
                reply_markup=InlineKeyboardMarkup(btns),
            )
        
        else:
            await m.delete()
            return await m.reply_text("«´·¥ú·¥á Ä è ·¥õ…™·¥ç·¥á·¥Ö ·¥è·¥ú·¥õ! ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥á…¥·¥õ…™ Ä·¥á ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ä…¢·¥Ä…™…¥.")
    
    async def activevc_page(
        self,
        message: Message or CallbackQuery,
        collection: list,
        page: int = 0,
        index: int = 0,
        edit: bool = False,
    ):
        
        m = message.message if isinstance(message, CallbackQuery) else message
        
        if not collection:
            text = "**…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs Íú∞·¥è·¥ú…¥·¥Ö!**"
            if edit:
                return await m.edit_text(text)
            return await m.reply_text(text)
        
        grouped, total = formatter.group_the_list(collection, 5)
        text = f"__({page+1}/{len(grouped)})__ **{PbxBot.app.mention} ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs:** __{total} ·¥Ñ ú·¥Ä·¥õs__\n\n"
        btns = Buttons.active_vc_markup(len(grouped), page)
        
        try:
            for active in grouped[int(page)]:
                index += 1
                text += f"**{'0' if index < 10 else ''}{index}:** {active['title']} [`{active['chat_id']}`]\n"
                text += f"    ** ü…™s·¥õ·¥á…¥·¥á Äs:** __{active['participants']}__\n"
                text += f"    **·¥ò ü·¥Ä è…™…¥…¢:** __{active['playing']}__\n"
                text += f"    **·¥†·¥Ñ ·¥õ è·¥ò·¥á:** __{active['vc_type']}__\n"
                text += f"    **s…™…¥·¥Ñ·¥á:** __{active['active_since']}__\n\n"
        
        except IndexError:
            page = 0
            for active in grouped[int(page)]:
                index += 1
                text += f"**{'0' if index < 10 else ''}{index}:** {active['title']} [`{active['chat_id']}`]\n"
                text += f"    ** ü…™s·¥õ·¥á…¥·¥á Äs:** __{active['participants']}__\n"
                text += f"    **·¥ò ü·¥Ä è…™…¥…¢:** __{active['playing']}__\n"
                text += f"    **·¥†·¥Ñ ·¥õ è·¥ò·¥á:** __{active['vc_type']}__\n"
                text += f"    **s…™…¥·¥Ñ·¥á:** __{active['active_since']}__\n\n"
        
        if edit:
            await m.edit_text(text, reply_markup=InlineKeyboardMarkup(btns))
        
        else:
            await m.reply_text(text, reply_markup=InlineKeyboardMarkup(btns))
    
    async def authusers_page(
        self,
        message: Message or CallbackQuery,
        rand_key: str,
        page: int = 0,
        index: int = 0,
        edit: bool = False,
    ):
        
        m = message.message if isinstance(message, CallbackQuery) else message
        collection = Config.CACHE[rand_key]
        
        if not collection:
            text = "**…¥·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs Íú∞·¥è·¥ú…¥·¥Ö!**"
            if edit:
                return await m.edit_text(text)
            return await m.reply_text(text)
        
        grouped, total = formatter.group_the_list(collection, 6)
        chat = message.chat.title or "·¥ú…¥·¥ã…¥·¥è·¥°…¥ ·¥Ñ ú·¥Ä·¥õ"
        text = f"__({page+1}/{len(grouped)})__ **·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs …™…¥ {chat}:**\n    >> __{total} ·¥ús·¥á Äs__\n\n"
        btns = Buttons.authusers_markup(len(grouped), page, rand_key)
        
        try:
            for auth in grouped[int(page)]:
                index += 1
                text += f"**{'0' if index < 10 else ''}{index}:** {auth['auth_user']}\n"
                text += f"    **·¥Ä·¥ú·¥õ ú  ô è:** {auth['admin_name']} (`{auth['admin_id']}`)\n"
                text += f"    **s…™…¥·¥Ñ·¥á:** __{auth['auth_date']}__\n\n"
        
        except IndexError:
            page = 0
            for auth in grouped[int(page)]:
                index += 1
                text += f"**{'0' if index < 10 else ''}{index}:** {auth['auth_user']}\n"
                text += f"    **·¥Ä·¥ú·¥õ ú  ô è:** {auth['admin_name']} (`{auth['admin_id']}`)\n"
                text += f"    **s…™…¥·¥Ñ·¥á:** __{auth['auth_date']}__\n\n"
        
        if edit:
            await m.edit_text(text, reply_markup=InlineKeyboardMarkup(btns))
        
        else:
            await m.reply_text(text, reply_markup=InlineKeyboardMarkup(btns))
    
    async def favorite_page(
        self,
        message: Message or CallbackQuery,
        collection: list,
        user_id: int,
        mention: str,
        page: int = 0,
        index: int = 0,
        edit: bool = False,
        delete: bool = False,
    ):
        
        m = message.message if isinstance(message, CallbackQuery) else message
        
        if not collection:
            text = "**…¥·¥è Íú∞·¥Ä·¥†·¥è Ä…™·¥õ·¥á ·¥õ Ä·¥Ä·¥Ñ·¥ãs Íú∞·¥è·¥ú…¥·¥Ö!**"
            if edit:
                return await m.edit_text(text)
            return await m.reply_text(text)
        
        grouped, total = formatter.group_the_list(collection, 5)
        text = f"__({page+1}/{len(grouped)})__ {mention} **Íú∞·¥Ä·¥†·¥è Ä…™·¥õ·¥ás:** __{total} ·¥õ Ä·¥Ä·¥Ñ·¥ãs__\n\n"
        btns, final = await Buttons.favorite_markup(
            grouped, user_id, page, index, db, delete
        )
        
        if edit:
            await m.edit_text(f"{text}{final}", reply_markup=InlineKeyboardMarkup(btns))
        
        else:
            await m.reply_text(
                f"{text}{final}", reply_markup=InlineKeyboardMarkup(btns)
            )
    
    async def queue_page(
        self,
        message: Message or CallbackQuery,
        collection: list,
        page: int = 0,
        index: int = 0,
        edit: bool = False,
    ):
        
        m = message.message if isinstance(message, CallbackQuery) else message
        
        if not collection:
            text = "**…¥·¥è ·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥ ·¥õ ú·¥á ·¥á…¥·¥õ…™ Ä·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è Ä ·¥ò ü·¥Ä è ü…™s·¥õ!**"
            if edit:
                return await m.edit_text(text)
            return await m.reply_text(text)
        
        grouped, total = formatter.group_the_list(collection, 5)
        text = f"__({page+1}/{len(grouped)})__ **…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è Ä ·¥ò ü·¥Ä è ü…™s·¥õ:** __{total} ·¥õ Ä·¥Ä·¥Ñ·¥ãs__\n\n"
        btns = Buttons.queue_markup(len(grouped), page)
        
        try:
            for que in grouped[page]:
                index += 1
                text += f"**{'0' if index < 10 else ''}{index}:** {que['title']}\n"
                text += f"    **·¥†·¥Ñ ·¥õ è·¥ò·¥á:** {que['vc_type']}\n"
                text += f"    ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è:** {que['user']}\n"
                text += f"    **·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:** __{que['duration']} ({que.get('platform', '·¥ú…¥·¥ã…¥·¥è·¥°…¥').capitalize()}  ü…™·¥†Ê≥ï
                text += "\n"
        
        except IndexError:
            return await m.edit_text("**…¥·¥è ·¥ç·¥è Ä·¥á ·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è Ä ·¥ò ü·¥Ä è ü…™s·¥õ!**")
        
        if edit:
            await m.edit_text(text, reply_markup=InlineKeyboardMarkup(btns))
        
        else:
            await m.reply_text(text, reply_markup=InlineKeyboardMarkup(btns))


MakePages = Pages()
